# The driver class for generating a new executable script.
class Chalk::Boilerplate::Script < Chalk::Boilerplate::Base
  def execute
    file = @arguments.first

    if file
      write_file(file, template)
      chmod(0755, file)
    else
      puts template
    end
  end

  private

  def template
    <<-EOF
#!/usr/bin/env ruby

require 'escort'
require 'chalk-log'

class ExampleCommand
  include Chalk::Log

  attr_reader :options, :arguments

  def initialize(options, arguments)
    @options = options
    @arguments = arguments
  end

  def execute
    log.info('Shaving yaks...', yaks: options[:yaks])
  end
end

Escort::App.create do |app|
  app.version '0.0.1'
  app.summary 'A script autogenerated by boiler'
  app.description 'Longer-form description'

  app.command(:my_subcommand) do |command|
    command.summary 'Subcommand to run'
    command.description 'Longer-form description of subcommand'
    command.options do |opts|
      opts.opt :yaks, 'How many yaks to shave', short: '-y', type: :integer
    end

    command.action do |options, arguments|
      # Global options available in options[:global][:options]
      suboptions = options.
        fetch(:global).
        fetch(:commands).
        fetch(:my_subcommand).
        fetch(:options)
      ExampleCommand.new(suboptions, arguments).execute
    end
  end

  app.action do |options, arguments|
    raise "Must provide an argument. Run -h for options."
  end
end
EOF
  end
end
